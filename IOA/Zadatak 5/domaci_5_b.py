# -*- coding: utf-8 -*-
"""Domaci_5_b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QyJcMC9xBR6NaFIxnxCX5d3cGIwqVTc-
"""

import matplotlib.pyplot as plt
import scipy.optimize
import numpy as np
import math

w = [-4, 2, -6, 4, 0, -2, -7, 9, -5, 3]

x_in = np.arange(-1.0 , 1.1, 0.1)

def f(w, x_in):
    f_result = 0.0
    
    for x in x_in:
        fr = y_out(x, w) - y_training(x)
        f_result += math.pow(fr, 2)

    f_result_finally = math.sqrt(f_result)

    return f_result_finally

def y_training(x_in):
    y_train = math.sin(math.pi * x_in)
    y_result = 0.5 * y_train
    return y_result

def y_out(x_in, w):
    y_out_result = 0.0

    for x in range(5):
        ym = math.tanh(x_in * w[x])
        y_out_result += w[x + 5] * ym

    y_out_result_finally = math.tanh(y_out_result)

    return y_out_result_finally



result = scipy.optimize.minimize(f, w, x_in, method = 'Nelder-Mead', options = {'maxiter' : 1389}) # optimizaciona funkcija


plt.style.use('dark_background')
plt.title('Grafik y_out, y_training')


y = []
for x in x_in:
  y.append(0.5 * math.sin(math.pi * x))


plt.plot(x_in, y, 'w', label="y_training")

def y_out_after_optimization(xi_n, w):
    y = []
    for x in x_in:
        y.append(y_out(x, w))
    return y

plt.plot(x_in, y_out_after_optimization(x_in, result.x), 'rx', label="y_out")

plt.axis([-1, 1, -0.7, 0.55]) # granice x_min, x_max, y_min, y_max
plt.xlabel('x_in') # ime labele x
plt.ylabel('y') # ime labele y
plt.grid()
plt.legend(frameon=True, loc='lower center', ncol=2)

plt.show()