# -*- coding: utf-8 -*-
"""Domaci_06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a9Eykm2vFgYteNom71-QTbE2vdLHR1jA
"""

import numpy as np
import math
from scipy.optimize import linprog

r = np.array([310, 380, 350, 285, 310, 380, 350, 285, 310, 380, 350, 285])
r_negative = -r

a = np.array([
    [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
    [480, 650, 580, 390, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 480, 650, 580, 390, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 480, 650, 580, 390],
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
])

b = np.array([10, 16, 8, 6800, 8700, 4300, 18, 15, 23, 12])

Linear_Optimization = linprog(r_negative, a, b) # r_negative mora jer trazimo max a ne min

NumServers = []
arr = set()

optimal_maximum_capacity = 0
best_NumServers = []

# mi smo dobili od linprog realne vrednosti, sad ih zaokruzujemo na cele brojeve i uzimamo opseg [-3,+3] od realne vrednosti koju smo zaokruzili
for i in Linear_Optimization.x:
  numServer_int = math.trunc(i)

  if(numServer_int == 0):
    NumServers.append(0)
  else:

    for j in [0, 1, 2]:
      plus = numServer_int + j + 1
      minus = numServer_int - j

      arr.add(plus)

      if(minus <= 0):
        arr.add(0)

      if(minus > 0):
        arr.add(minus)

    NumServers.append(arr)
  arr = set()

# deff poznate i nepoznate na osnovu realnih vrednosti
# Komentar : uveo sam da one tamo gde su vrednosti 0 u realnim brojevima ne koristim for petlju
x11 = NumServers[0] #nula je ne treba for petlja
x12 = NumServers[1]
x13 = NumServers[2] #nula je ne treba for petlja
x14 = NumServers[3] #nula je ne treba for petlja
x21 = NumServers[4] #nula je ne treba for petlja
x22 = NumServers[5]
x23 = NumServers[6]
x24 = NumServers[7]
x31 = NumServers[8] #nula je ne treba for petlja
x32 = NumServers[9]
x33 = NumServers[10]
x34 = NumServers[11]

for i12 in x12:

  for i22 in x22:

      for i23 in x23:

          for i24 in x24:

              for i32 in x32:

                  for i33 in x33:

                      for i34 in x34:

                          curr_arr = np.array([x11, i12, x13, x14, x21, i22, i23, i24, x31, i32, i33, i34])

                          new_arr_b = np.matmul(a, curr_arr) # preporuceno od strane profesorke

                          if(np.all(np.less_equal(new_arr_b, b))):
                              r1 = 310*x11 + 380*i12 + 350*x13 + 285*x14
                              r2 = 310*x21 + 380*i22 + 350*i23 + 285*i24
                              r3 = 310*x31 + 380*i32 + 350*i33 + 285*i34

                              optimal_capacity = r1 + r2 + r3 

                              if(optimal_maximum_capacity == 0):
                                best_NumServers = curr_arr
                                optimal_maximum_capacity = optimal_capacity

                              elif(optimal_maximum_capacity <= optimal_capacity):
                                  best_NumServers = curr_arr
                                  optimal_maximum_capacity = optimal_capacity

                                
print("Optimal server layout by racks (int numbers)")
for i in best_NumServers:
  print(i)

print()

print("Optimal maximum computer capacity (int number) is : ")
print(optimal_maximum_capacity)
print()
print("=========================================================================")

print()
print("Optimal server layout by racks (real numbers) : ")
for i in Linear_Optimization.x:
  print("{:.20f}".format(i))
print()
print("Optimal maximum computer capacity (real number) is : ")
print(abs(Linear_Optimization.fun))
print()